'''
Created on Jul 26, 2019

@author: BasitM

https://rubrik.gitbook.io/rubrik-sdk-for-python/cluster-functions/cluster_node_ip
'''
import rubrik_cdm
import json
import csv
import mysql.connector
from mysql.connector import errorcode
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


rubrik = rubrik_cdm.Connect(
       node_ip = "{{ node_ip }}",
       username = "{{ username }}",
       password = "{{ password }}",
       enable_logging=True
    )

mysql_config = {
  'user': '{{rubrik_db_user}}',
  'password': '{{rubrik_db_password}}',
  'host': '{{db_host}}',
  'database': '{{db_name}}',
  'raise_on_warnings': True
}

report_config = {
    "name": "AllSitesData",
    "reportTemplate": "ObjectProtectionSummary"
}
update_config = {
    "name": "AllSitesData",
}

table_config = {
  "limit": 1000,
  "sortBy": "Organization",
  "sortOrder": "asc"
}

def update_billing(org,object_name,object_size):
    try:
        connection = mysql.connector.connect(**mysql_config)
        cursor = connection.cursor()
        for elem in zip(org,object_name, object_size):
            update_bill = ("INSERT INTO billing "
              "(organization,object_in_custody,object_size,price_per_gb)"
              "VALUES (%s, %s, %s)")
            cursor.execute(update_bill,elem)
            connection.commit()
    except mysql.connector.Error as err:
        print(err)
    connection.close()

def output_json(name):
    #parsed = json.loads(name)
    print(json.dumps(name,indent=2))

def get_report_ids(name):
    report = rubrik.get("internal","/report")
    report_id_table = {}
    for i in report['data']:
        report_id_table.update({i['name']: i['id']})
    return report_id_table[name]


report_id = str(get_report_ids("AllSitesData"))

# table = rubrik.get("internal","/report/"+report_id)
# csv_link = rubrik.get("internal","/report/"+report_id+"/csv_link")

report_table = rubrik.post("internal","/report/"+report_id+"/table",config=table_config)



# report = rubrik.get("internal","/stats/sla_domain_storage")

# print( display_json(report))

# print(table)
# report = rubrik.post("internal","/report",report_config)
# response = json.dumps(report_table,indent=4)
# print(response)
# print(report_table['dataGrid'][0][2])

object_logical_size = []
organization = []
local_data_transferred = []

for obj_size in report_table['dataGrid']:
  object_logical_size.append(obj_size[3])

for org in report_table['dataGrid']:
  organization.append(org[1])

for local_data_tx in report_table['dataGrid']:
  local_data_transferred.append(local_data_tx[4])
  

# with open('rubrik_sample.csv','a+') as csv_file:
#     for val in zip(organization,object_name,object_size):
#         csv_writer = csv.writer(csv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
#         csv_writer.writerow(val)

update_billing(organization, object_logical_size, local_data_transferred)